#!/bin/sh
# Find all layers within checkout and inject accordingly into initial kas config
#
# References
#   - https://docs.yoctoproject.org/dev/dev-manual/layers.html
#   - https://layers.openembedded.org/layerindex/branch/master/layers
set -e

# Load generated environment
. ./.env
_VERBOSITY=1
assert_pwd_is_root

if [ $# -lt 1 ]; then
  printf "ERROR: KAS_YML argument is required!\n"
  exit 1
fi
_KAS_YML="$1"
shift

LAYER_FINGERPRINT="/conf/layer.conf"
printf "discovering layer config paths (**%s) relative to %s...\n" \
    "$LAYER_FINGERPRINT" "$SOURCE_DIR"
REPO_AND_LAYER_PATHS="$(cd "$SOURCE_DIR"; find -path "*$LAYER_FINGERPRINT" -exec bash -c \
    "sed 's/.\/\(.*\)\/conf\/layer.conf/\1/'<<<{}" \;)"

KAS_TMP=${_KAS_YML%.yml}.updatelayers.yml}
cp "$_KAS_YML" "$KAS_TMP"

should_exclude_layer_path() {
    for exclusion_regex in bitbake/lib/layerindexlib/tests ; do
        # printf "Testing exclusion %s against layer path %s\n" "$exclusion_regex" "$1"
        if echo "$1" | grep -Eq $exclusion_regex; then
            # printf "    Excluding layer %s matching pattern '%s'\n" "$1" "$exclusion_regex"
            return 0
        fi
    done
    return 1
}

for REPO_LAYER_PATH in $REPO_AND_LAYER_PATHS; do
    export REPO_NAME=${REPO_LAYER_PATH%%/*}
    export LAYER_REL_PATH=${REPO_LAYER_PATH}
    #export LAYER_REL_PATH=${REPO_LAYER_PATH#*/}
    export LAYER_NAME=${LAYER_REL_PATH##*/}
    if ! should_exclude_layer_path $REPO_LAYER_PATH; then
        # printf "    %s: Injecting layer '%s' with rel path %s into repo '%s'...\n" \
        #     "$REPO_LAYER_PATH" "$LAYER_NAME" "$LAYER_REL_PATH" "$REPO_NAME"
        # Translate repo name to '.'
        if [ "$LAYER_NAME" = "$REPO_NAME" ]; then
            export LAYER_NAME='.'
            export LAYER_REL_PATH='.'
        fi
        yq -i '.repos[env(REPO_NAME)].layers[env(LAYER_NAME)]["path"] = env(LAYER_REL_PATH)' "$KAS_TMP"
        # yq -i '.repos[env(REPO_NAME)].layers[env(LAYER_NAME)] = "" | 
        #     .repos[env(REPO_NAME)].layers[env(LAYER_NAME)] tag="!!null"' "$KAS_TMP"
    fi
done 

cp -f "$KAS_TMP" "$_KAS_YML" 
printf "updatelayers: ${GREEN}Success${RESET}fully injected repo layers into %s:\n" "${_KAS_YML}"
# yq '.' "$_KAS_YML"
