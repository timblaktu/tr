#!/usr/bin/env bash
# NAME
#        mkasconf - migrate any Yocto project to kas configuration
# 
# SYNOPSIS
#        mkasconf REPO_URL REPO_BRANCH REPO_MANINFEST_FILENAME SETUP_ENV [ARG1 [ARG2]...]
# 
# DESCRIPTION
#        mkasconf integrates arbitrary Yocto projects into kas-based projects. 
#
#        Implementing the following pseudocode:
# 
#            1. fetch sources from REPO_URL arg, either:
#                1. `repo init $REPO_URL && repo sync`
#                1. `git clone --recurse-submodules $REPO_URL`
#            1. execute <setup-environment-script>
#            1. convert and merge the user configuration (`conf/{local,bblayers,site,auto}.conf`)
#               into kas config yaml
#                1. injecting `header.super-repo-origin: "REPO_URL"` in the kas.yml. 
#                        1. This field uniquely identifies a specific revision of the super-repo.
# 
#        The generated `kas.yml` can be used within the normal kas context, 
#        either a monolithic top-level project corresponding to the converted Yocto project, 
#        or as a nested layer that can be included from a higher-level kas project. 
# 
#        The intent is that this script will become part of `kas` workflows and commands, 
#        enables the ongoing acceptance of changes from kas-unaware upstream Yocto projects, 
#        by implementing the following logic (in kas):
# 
#         1. keep/cache/commit the kas.yml generated by mkasconf, but...
#         1. compare local kas.yml `header.super-repo-origin` to the field in the .yml 
#            supplied in the kas call vs the one in the kas.yml in the kas working tree.
#             1. If these fields are different, it is because the user intends to accept some 
#                upstream changes to the super-repo, and they have manually changed the 
#                super-repo-origin.
# 
# ARGS
#     REPO_URL
#         Specifies either:
#             - HTTP-GETtable Google repo-tool xml manifest file defining all layer repositories
#             - git cloneable super-repository defining layer repositories as submodules
#     SETUP_ENV [ARG1 [ARG2]...]
#         Command and args representing the setup-environment script, relative to the 
#         checkout/sources root, that would be executed when setting up manual yocto 
#         build environment.
set -euo pipefail

# TODO: validate workingn dir is correct - should be called from root
# Enter work dir and load generated env
WORK_ROOT=/work                      # root path of working tree / volume
cd $WORK_ROOT
. .env
printf "$RESET"
_VERBOSITY=1

if [ $# -lt 4 ]; then
  printf "ERROR: REPO_URL, REPO_BRANCH, REPO_MANIFEST_FILENAME, and SETUP_ENV arguments are required!\n" && exit 1
fi
REPO_URL="$1"
shift
REPO_BRANCH="$1"
shift
REPO_MANIFEST_FILENAME="$1"
shift
SETUP_ENV=( "$@" )

mkdir -p "$BUILD_DIR"
cd $BUILD_DIR

REPO_MANIFEST_XML="$REPO_MANIFEST_FILENAME"
export REPO_MANIFEST_JSON="${REPO_MANIFEST_FILENAME%.*}.json"
export REPO_MANIFEST_KAS_JSON="${REPO_MANIFEST_FILENAME%.*}.kas.json"
export KAS_YML=kas.yml

git config --global --add safe.directory '*'
git config --global color.ui true
git config --global user.email flip@flibbertyjibbets.com
git config --global user.name "Flip Flippy"

if [ "${REPO_MANIFEST_FILENAME##*.}" == "xml" ]; then
    WGET_LOG=$(mktemp --suffix wget_log)
    printf "Testing fetch of repo manifest url %s...\n" "$REPO_MANIFEST_URL"
    if ! (set -x; wget "$REPO_MANIFEST_URL" -q -o $WGET_LOG -O "$REPO_MANIFEST_XML".downloaded); then
        printf "ERROR: Could't wget %s! Exit code %s  LogFile:\n%s" "$REPO_URL" "$?" "$(cat $WGET_LOG)" && exit 1
    fi
    # Docs: https://source.android.com/docs/setup/reference/repo#init
    printf "Initializing %s/.repo with manifest %s on %s branch in repo %s..\n" "$(pwd)" \
        "$REPO_MANIFEST_FILENAME" "$REPO_BRANCH" "$REPO_URL"
    cat "$REPO_MANIFEST_XML".downloaded
    rm -rf .repo .git
    id
    set -x
    git config --global --list
    git config --list --show-origin
    repo --trace init -u $REPO_URL -b $REPO_BRANCH -m $REPO_MANIFEST_FILENAME
    printf "Synchronizing repo manifest..\n"
    repo -trace sync
    set +x
else
    printf "ERROR: Git super-repos are NOT YET SUPPORTED.\n" && exit 1
    # TODO: git clone --recurse-submodules "$REPO_URL"
fi

printf "Setting up Build Environment by executing user-supplied command: '%s'\n" "${SETUP_ENV[*]}"
"${SETUP_ENV[@]}"

printf "TODO: Converting the generated user configuration to kas yml..\n"

printf "TODO: Validating kas yml against build environment..\n"

printf "TODO: Injecting super-repo origin into %s..\n" "$KAS_YML"

#repoxml2kasymlrepos


function repoxml2kasymlrepos() {
    yq -p=xml -o=json --xml-attribute-prefix '' --xml-skip-proc-inst "$REPO_MANIFEST_XML" \
        | jq 'INDEX(.manifest.remote[]; .name) as $remotes | 
            { 
                repos: .manifest.project | map(
                    { 
                        "key": .name, 
                        "value": { 
                            path: .path, 
                            url: "\($remotes[.remote].fetch)/\(.name)", 
                            branch: .upstream,
                            commit: .revision 
                        }
                    }
                ) | from_entries | del(..|nulls)
            }' \
        | yq -p=json -o=yaml "$KAS_YML"
    printf "${GREEN}SUCCESS${RESET}fully converted repo manifest xml %s into kas config yaml %s\n" "$REPO_MANIFEST_XML" "$KAS_YML"
    yq . "$KAS_YML"
}

function kashdr() {
    echo | yq '
        { 
            header: { 
                version: 17 
            }, 
            machine: "imx8mp-var-dart", 
            distro: "fsl-imx-xwayland", 
            target: "fsl-image-gui", 
            build_system: "openembedded", 
            env: { 
                DL_DIR: "/mnt/wsl/internal-4tb-nvme/dl_dir", 
                SSTATE_DIR: "/mnt/wsl/internal-4tb-nvme/sstate_dir" 
            }, 
            local_conf_header: {
                custom-local-conf: |
                    # Xilica additions
                    DL_DIR     = "/mnt/wsl/internal-4tb-nvme/dl_dir"
                    SSTATE_DIR = "/mnt/wsl/internal-4tb-nvme/sstate_dir"
                    BB_NUMBER_THREADS = "18"
                    PARALLEL_MAKE = "-j 12"
                    # These may have caused fetch/unpack errors?
                    #BB_GIT_SHALLOW ?= "1"
                    #BB_GIT_SHALLOW_DEPTH ?= "1"
                    #BB_GENERATE_SHALLOW_TARBALLS ?= "1"
                    # Toggle this if/when partitioning the build into Pre-Fetch/Build stages.
                    # This is a good way to build in early assertion to catch errors.
                    # A successfully pre-fetched target should build fine without the network.
                    #BB_NO_NETWORK = "1"
                    #BBDEBUG
                    # from local.conf generated by var/imx setup scripts
                    EXTRA_IMAGE_FEATURES ?= "debug-tweaks"
                    USER_CLASSES ?= "buildstats"
                    PATCHRESOLVE = "noop"
                    BB_DISKMON_DIRS ??= "\
                        STOPTASKS,${TMPDIR},1G,100K \
                        STOPTASKS,${DL_DIR},1G,100K \
                        STOPTASKS,${SSTATE_DIR},1G,100K \
                        STOPTASKS,/tmp,100M,100K \
                        HALT,${TMPDIR},100M,1K \
                        HALT,${DL_DIR},100M,1K \
                        HALT,${SSTATE_DIR},100M,1K \
                        HALT,/tmp,10M,1K"
                    PACKAGECONFIG:append:pn-qemu-system-native = " sdl"
                    CONF_VERSION = "2"
                    ACCEPT_FSL_EULA = "1"
                    PACKAGE_CLASSES = "package_deb"
            }
            '
}

# DEPRECATED
# Old impl just translated repo xml into kas config yml format.
# This has become unnecessary since discovering we have no choice
# but to automate the standard OE setup-environment process, since
# the ultimate user configuration for the yocto project is generated
# by procedural shell scripts, and cannot be generated from structured
# data alone.
function xml2yml() {
    printf "Converting repo XML manifest '%s' to json at '%s'...\n" "${REPO_MANIFEST_XML}" "${REPO_MANIFEST_JSON}"
    yq -p=xml -o=json --xml-attribute-prefix '' --xml-skip-proc-inst "$REPO_MANIFEST_XML" > "$REPO_MANIFEST_JSON"
    # verbose && echo && jq . "$REPO_MANIFEST_JSON"

    printf "Converting repo JSON manifest '%s' to kas configuration json...\n" "$REPO_MANIFEST_JSON"
    # TODO: is it ok to be discarding the <linkfile> elements in repo xml manifest? 
    jq 'INDEX(.manifest.remote[]; .name) as $remotes | 
        { 
            header: { 
                version: 17 
            }, 
            machine: "imx8mp-var-dart", 
            distro: "fsl-imx-xwayland", 
            target: "fsl-image-gui", 
            build_system: "openembedded", 
            env: { 
                DL_DIR: "/mnt/wsl/internal-4tb-nvme/dl_dir", 
                SSTATE_DIR: "/mnt/wsl/internal-4tb-nvme/sstate_dir" 
            }, 
            local_conf_header: {
                custom-local-conf: |
                    # Xilica additions
                    DL_DIR     = "/mnt/wsl/internal-4tb-nvme/dl_dir"
                    SSTATE_DIR = "/mnt/wsl/internal-4tb-nvme/sstate_dir"
                    BB_NUMBER_THREADS = "18"
                    PARALLEL_MAKE = "-j 12"
                    # These may have caused fetch/unpack errors?
                    #BB_GIT_SHALLOW ?= "1"
                    #BB_GIT_SHALLOW_DEPTH ?= "1"
                    #BB_GENERATE_SHALLOW_TARBALLS ?= "1"
                    # Toggle this if/when partitioning the build into Pre-Fetch/Build stages.
                    # This is a good way to build in early assertion to catch errors.
                    # A successfully pre-fetched target should build fine without the network.
                    #BB_NO_NETWORK = "1"
                    #BBDEBUG
                    # from local.conf generated by var/imx setup scripts
                    EXTRA_IMAGE_FEATURES ?= "debug-tweaks"
                    USER_CLASSES ?= "buildstats"
                    PATCHRESOLVE = "noop"
                    BB_DISKMON_DIRS ??= "\
                        STOPTASKS,${TMPDIR},1G,100K \
                        STOPTASKS,${DL_DIR},1G,100K \
                        STOPTASKS,${SSTATE_DIR},1G,100K \
                        STOPTASKS,/tmp,100M,100K \
                        HALT,${TMPDIR},100M,1K \
                        HALT,${DL_DIR},100M,1K \
                        HALT,${SSTATE_DIR},100M,1K \
                        HALT,/tmp,10M,1K"
                    PACKAGECONFIG:append:pn-qemu-system-native = " sdl"
                    CONF_VERSION = "2"
                    ACCEPT_FSL_EULA = "1"
                    PACKAGE_CLASSES = "package_deb"
            },
            repos: .manifest.project | map(
                { 
                    "key": .name, 
                    "value": { 
                        path: .path, 
                        url: "\($remotes[.remote].fetch)/\(.name)", 
                        branch: .upstream,
                        commit: .revision 
                    }
                }
            ) | from_entries | del(..|nulls)
        }' "$REPO_MANIFEST_JSON" > "$REPO_MANIFEST_KAS_JSON"
    # verbose && echo && jq . "$REPO_MANIFEST_KAS_JSON"
    
    printf "Converting KAS configuration JSON to YAML (technically unnecessary since kas supports json)...\n" "$REPO_MANIFEST_KAS_JSON"
    yq -p=json -o=yaml "$REPO_MANIFEST_KAS_JSON" > "$KAS_YML"

    printf "${GREEN}SUCCESS${RESET}fully converted repo manifest xml %s into kas config yaml %s\n" "$REPO_MANIFEST_XML" "$KAS_YML"
    # verbose && yq . "$KAS_YML"
}
