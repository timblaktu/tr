#!/usr/bin/env bash
# Convert Google Repo Manifest XML or git submodules to KAS `repos:` YAML
#
# Usage: mkasyml REPOTOOL_MANIFEST_OR_GIT_SUPERREPO_URL
#
#     URL: either an HTTP-GETtable Google repo-tool xml manifest file, or
#          a git cloneable repository for a super-repo with layers as submodules.
#
# Dependencies:
#
#     This script must be run inside kas-container shell, since all 
#     dependencies handled by container.
#
set -euo pipefail

# Enter work dir and load generated env
WORK_ROOT=/work                      # root path of working tree / volume
cd $WORK_ROOT
. .env
_VERBOSITY=1

if [ $# -lt 1 ]; then
  printf "ERROR: REPO_URL argument is required!\n" && exit 1
fi
REPO_URL="$1"

# BSP_YML (defined in .env) path in BUILD_DIR, base other intermediate files on this
export REPO_MANIFEST_YML=$BSP_YML
export REPO_MANIFEST_JSON="${BSP_YML%.*}.json"
export REPO_MANIFEST_KAS_JSON="${BSP_YML%.*}.kas.json"

REPO_MANIFEST_XML=$BUILD_DIR/repo_manifest.xml
if [ "${REPO_URL##*.}" == "xml" ]; then
    if ! wget "$REPO_URL" -O "$REPO_MANIFEST_XML"; then
        printf "ERROR: Could't wget %s! Exit code %s\n" "$REPO_URL" "$?" && exit 1
    fi
    printf "SUCCESSfully fetched repo manifest. Stored in %s\n" "$REPO_MANIFEST_XML"
else
    printf "ERROR: Git super-repo with submodules NOT YET SUPPORTED.\n" && exit 1
fi

printf "Converting repo XML manifest '%s' to json at '%s'...\n" "${REPO_MANIFEST_XML}" "${REPO_MANIFEST_JSON}"
yq -p=xml -o=json --xml-attribute-prefix '' --xml-skip-proc-inst "$REPO_MANIFEST_XML" > "$REPO_MANIFEST_JSON"
# verbose && echo && jq . "$REPO_MANIFEST_JSON"

printf "Converting repo JSON manifest '%s' to kas configuration json...\n" "$REPO_MANIFEST_JSON"
# TODO: is it ok to be discarding the <linkfile> elements in repo xml manifest? 
jq 'INDEX(.manifest.remote[]; .name) as $remotes | 
    { 
        header: { 
            version: 17 
        }, 
        machine: "imx8mp-var-dart", 
        distro: "fsl-imx-xwayland", 
        target: "fsl-image-gui", 
        build_system: "openembedded", 
        env: { 
            DL_DIR: "/mnt/wsl/internal-4tb-nvme/dl_dir", 
            SSTATE_DIR: "/mnt/wsl/internal-4tb-nvme/sstate_dir" 
        }, 
        local_conf_header: {
            custom-local-conf: |
                # Xilica additions
                DL_DIR     = "/mnt/wsl/internal-4tb-nvme/dl_dir"
                SSTATE_DIR = "/mnt/wsl/internal-4tb-nvme/sstate_dir"
                BB_NUMBER_THREADS = "18"
                PARALLEL_MAKE = "-j 12"
                # These may have caused fetch/unpack errors?
                #BB_GIT_SHALLOW ?= "1"
                #BB_GIT_SHALLOW_DEPTH ?= "1"
                #BB_GENERATE_SHALLOW_TARBALLS ?= "1"
                # Toggle this if/when partitioning the build into Pre-Fetch/Build stages.
                # This is a good way to build in early assertion to catch errors.
                # A successfully pre-fetched target should build fine without the network.
                #BB_NO_NETWORK = "1"
                #BBDEBUG
                # from local.conf generated by var/imx setup scripts
                EXTRA_IMAGE_FEATURES ?= "debug-tweaks"
                USER_CLASSES ?= "buildstats"
                PATCHRESOLVE = "noop"
                BB_DISKMON_DIRS ??= "\
                    STOPTASKS,${TMPDIR},1G,100K \
                    STOPTASKS,${DL_DIR},1G,100K \
                    STOPTASKS,${SSTATE_DIR},1G,100K \
                    STOPTASKS,/tmp,100M,100K \
                    HALT,${TMPDIR},100M,1K \
                    HALT,${DL_DIR},100M,1K \
                    HALT,${SSTATE_DIR},100M,1K \
                    HALT,/tmp,10M,1K"
                PACKAGECONFIG:append:pn-qemu-system-native = " sdl"
                CONF_VERSION = "2"
                ACCEPT_FSL_EULA = "1"
                PACKAGE_CLASSES = "package_deb"
        },
        repos: .manifest.project | map(
            { 
                "key": .name, 
                "value": { 
                    path: .path, 
                    url: "\($remotes[.remote].fetch)/\(.name)", 
                    branch: .upstream,
                    commit: .revision 
                }
            }
        ) | from_entries | del(..|nulls)
    }' "$REPO_MANIFEST_JSON" > "$REPO_MANIFEST_KAS_JSON"
# verbose && echo && jq . "$REPO_MANIFEST_KAS_JSON"
 
printf "Converting KAS configuration JSON to YAML (technically unnecessary since kas supports json)...\n" "$REPO_MANIFEST_KAS_JSON"
yq -p=json -o=yaml "$REPO_MANIFEST_KAS_JSON" > "$REPO_MANIFEST_YML"

printf "${GREEN}SUCCESS${RESET}fully converted repo manifest xml %s into kas config yaml %s\n" "$REPO_MANIFEST_XML" "$REPO_MANIFEST_YML"
# verbose && yq . "$REPO_MANIFEST_YML"
