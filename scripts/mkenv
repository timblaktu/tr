#!/bin/bash
# Generates .env and make.env files defining common constants
#
# This script must be called via `env -i mkenv` for proper operation,
# since it expects to have an empty environment.
#
# The generated make.env file is included by a Makefile, and as such:
#   - is sourced, not executed, by scripts and gnu make, so..
#   - must only contain variable definitions, e.g. var1=val
#   - sh basic parameter expansion is legal, e.g. var2=${var1}2
#   - parameter expansions need NOT and SHOULD NOT use double quotes, bc
#     double quotes get included in var values when sourcing from makefile
# 
# The generated .env file sources make.env and additionally other shell files
# that make cannot import, e.g. general shell variables and functions.
#
# References:
#   - make includes
#     - https://www.gnu.org/software/make/manual/html_node/Include.html
#   - posix sh parameter expansion
#     - https://pubs.opengroup.org/onlinepubs/009604499/utilities/xcu_chap02.html#tag_02_06_02

# export all variables defined in this script
set -o allexport

########################################################
# All variables defined below will end up in generated make.env / .env

SCRIPT_DIR=$(realpath "$(CDPATH= cd -- "$(dirname -- "$0")" && pwd -P)")
ROOT_DIR=$(realpath "$SCRIPT_DIR/..")
BUILD_DIR=$ROOT_DIR/build
SOURCE_DIR=$ROOT_DIR/sources

TIMEFORMAT='%3lR'

MACHINE=imx8mp-var-dart
DISTRO=fsl-imx-xwayland
TARGET=fsl-image-gui
BSP_VERSION=6.1.36-2.1.0
BSP_XML_FILENAME=imx-${BSP_VERSION}.xml
BSP_XML=variscite-bsp-platform/${BSP_XML_FILENAME}
# Apparently kas wants config file with relative path
BSP_YML=$(realpath --relative-to $ROOT_DIR $BUILD_DIR)/${BSP_XML_FILENAME/%.xml/.yml}

GIT_VERSION=$(git describe --dirty --always --tags)

KAS_IMAGE_VERSION=$GIT_VERSION
KAS_CONTAINER_IMAGE=ghcr.io/timblaktu/tr/xilikas:$KAS_IMAGE_VERSION

# Terminal Things
export TERM=screen
TPUT=/usr/bin/tput
if $TPUT setaf 1 &> /dev/null; then
    BOLD="$(     $TPUT bold)"
    UNDOBOLD="$( $TPUT dim)"
    STANDOUT="$( $TPUT rmso)"
    UNDOSTANDOUT="$($TPUT rmso)"
    UNDER="$(    $TPUT smul)"
    UNDOUNDER="$($TPUT rmul)"
    REV="$(      $TPUT rev)"
    BLINK="$(    $TPUT blink)"
    BLACK="$(    $TPUT setaf 0)"
    RED="$(      $TPUT setaf 1)"
    GREEN="$(    $TPUT setaf 2)"
    YELLOW="$(   $TPUT setaf 3)"
    BLUE="$(     $TPUT setaf 4)"
    MAGENTA="$(  $TPUT setaf 5)"
    CYAN="$(     $TPUT setaf 6)"
    GRAY="$(     $TPUT setaf 7)"
    DKGRAY="$(   $TPUT setaf 8)"
    BRRED="$(    $TPUT setaf 9)"
    BRGREEN="$(  $TPUT setaf 10)"
    BRYELLOW="$( $TPUT setaf 11)"
    BRBLUE="$(   $TPUT setaf 12)"
    BRMAGENTA="$($TPUT setaf 13)"
    BRCYAN="$(   $TPUT setaf 14)"
    BRGRAY="$(   $TPUT setaf 15)"
    # TODO: This value for RESET is not printed correctly from Makefile recipes, probably due to escape rules
    RESET="$($TPUT sgr0)"
    # printf -v RESET "\033[0;10m"
else
    printf "Disabling ANSI color codes since `tput setaf 1` returned ERROR code $?\n"
    STANDOUT=""
    UNDO_STANDOUT=""
    UNDER=""
    UNDO_UNDER=""
    REV=""
    BLINK=""
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    BRIGHT_RED=""
    BRIGHT_GREEN=""
    BRIGHT_YELLOW=""
    RESET=""
fi
unset TPUT
########################################################
# Create the make.env file
#   - For each variable defined in the environment, i.e. all of the above definitions,
#     dump a simple assignment statement
cat << EOF > $ROOT_DIR/make.env
# Make-includable Environment (Variable) File
#   - Generated by $0 at $(date)

EOF
env -0 | while IFS='=' read -r -d '' n v; do
    [[ "$n" != "_" ]] && printf "%s=%s\n" "$n" "$v" >> $ROOT_DIR/make.env
done

########################################################
# Create the .env file to source make.env and other files
cat << EOF > $ROOT_DIR/.env
# Top-level Environment File (sourcable by shells, not GNU make)
#   - Generated by $0 at $(date)

# export all variables sourced below 
set -o allexport

# Source generated make-compatible env variables
source make.env

# Source shell library definitions and functions
source scripts/functions.sh

# disable auto-export shell option
set +o allexport
EOF

